[{"path":"https://jmbarbone.github.io/fuj/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 fuj authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jmbarbone.github.io/fuj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Mark Barbone. Author, copyright holder, maintainer.","code":""},{"path":"https://jmbarbone.github.io/fuj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbone J (2022). fuj: Functions Utilities Jordan. R package version 0.0.0.9000, https://jmbarbone.github.io/fuj/.","code":"@Manual{,   title = {fuj: Functions and Utilities for Jordan},   author = {Jordan Mark Barbone},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://jmbarbone.github.io/fuj/}, }"},{"path":"https://jmbarbone.github.io/fuj/index.html","id":"fuj-","dir":"","previous_headings":"","what":"Functions and Utilities for Jordan","title":"Functions and Utilities for Jordan","text":"goal fuj provide low level tools packages Jordan.","code":""},{"path":"https://jmbarbone.github.io/fuj/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions and Utilities for Jordan","text":"can install development version fuj GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jmbarbone/fuj\")"},{"path":"https://jmbarbone.github.io/fuj/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions and Utilities for Jordan","text":"Quicker data.frames: extensions: Simple structures: Suppress messages warnings:","code":"library(fuj) quick_df(list(a = 1:5, b = letters[1:5])) #>   a b #> 1 1 a #> 2 2 b #> 3 3 c #> 4 4 d #> 5 5 e quick_dfl(a = 1:3, b = list(1:5, 6:10, 11:15)) #>   a                  b #> 1 1      1, 2, 3, 4, 5 #> 2 2     6, 7, 8, 9, 10 #> 3 3 11, 12, 13, 14, 15 1:10 %out% c(1, 3, 5, 9)       # opposite of %in%  #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE letters[1:5] %wo% letters[3:7] #> [1] \"a\" \"b\" letters[1:5] %wi% letters[3:7] #> [1] \"c\" \"d\" \"e\" struct(list(a = 1, b = 2), class = \"foo\", c = 3, d = 3) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> attr(,\"c\") #> [1] 3 #> attr(,\"d\") #> [1] 3 #> attr(,\"class\") #> [1] \"foo\" foo <- function(...) { message(paste0(list(...))) ; c(...) } muffle(foo(1:3)) #> [1] 1 2 3 sapply(1:3, muffle(fun = foo)) #> [1] 1 2 3  x <- list(\"a\", 1) wuffle(as.integer(x)) #> [1] NA  1 sapply(x, wuffle(fun = as.integer)) #> [1] NA  1"},{"path":"https://jmbarbone.github.io/fuj/reference/alias_arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic wrappers — alias_arithmetic","title":"Arithmetic wrappers — alias_arithmetic","text":"Arithmetic wrappers","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/alias_arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic wrappers — alias_arithmetic","text":"","code":"add()  subtract()  multiply()  divide()  raise_power()  remainder()  divide_int()"},{"path":"https://jmbarbone.github.io/fuj/reference/alias_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and replace aliases — alias_extract","title":"Extract and replace aliases — alias_extract","text":"Extract replace aliases","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/alias_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and replace aliases — alias_extract","text":"","code":"subset1()  subset2()  subset2()  subassign1()  subassign2()  subassign3()"},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse — collapse","title":"Collapse — collapse","text":"Simple wrapper concatenating strings","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse — collapse","text":"","code":"collapse(..., sep = \"\")"},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse — collapse","text":"... one R objects, converted character vectors. sep character string separate terms.      NA_character_.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact attributes — exattr","title":"Exact attributes — exattr","text":"Get exact attributes object","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact attributes — exattr","text":"","code":"exattr(x, which)  x %attr% which"},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact attributes — exattr","text":"x object whose attributes accessed. non-empty character string specifying attribute     accessed.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip — flip","title":"Flip — flip","text":"Flip object.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip — flip","text":"","code":"flip(x, ...)  # S3 method for default flip(x, ...)  # S3 method for matrix flip(x, by_row = TRUE, keep_rownames = NULL, ...)  # S3 method for data.frame flip(x, by_row = TRUE, keep_rownames = NULL, ...)"},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip — flip","text":"x object ... Additional arguments passed methods by_row TRUE, flips row, otherwise column keep_rownames Logical, TRUE reset rownames; NULL","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip — flip","text":"vector values, equal length x reversed data frame flipped rows/columns","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip — flip","text":"","code":"flip(letters[1:3]) #> [1] \"c\" \"b\" \"a\" flip(seq.int(9, -9, by = -3)) #> [1] -9 -6 -3  0  3  6  9 flip(head(iris)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.4         3.9          1.7         0.4  setosa #> 2          5.0         3.6          1.4         0.2  setosa #> 3          4.6         3.1          1.5         0.2  setosa #> 4          4.7         3.2          1.3         0.2  setosa #> 5          4.9         3.0          1.4         0.2  setosa #> 6          5.1         3.5          1.4         0.2  setosa flip(head(iris), keep_rownames = TRUE) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 6          5.4         3.9          1.7         0.4  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 1          5.1         3.5          1.4         0.2  setosa flip(head(iris), by_row = FALSE) #>   Species Petal.Width Petal.Length Sepal.Width Sepal.Length #> 1  setosa         0.2          1.4         3.5          5.1 #> 2  setosa         0.2          1.4         3.0          4.9 #> 3  setosa         0.2          1.3         3.2          4.7 #> 4  setosa         0.2          1.5         3.1          4.6 #> 5  setosa         0.2          1.4         3.6          5.0 #> 6  setosa         0.4          1.7         3.9          5.4"},{"path":"https://jmbarbone.github.io/fuj/reference/grapes-colons-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Colons — %colons%","title":"Colons — %colons%","text":"Get object package","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/grapes-colons-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colons — %colons%","text":"","code":"package %colons% name"},{"path":"https://jmbarbone.github.io/fuj/reference/grapes-colons-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colons — %colons%","text":"package Name package name Name retrieve","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/grapes-colons-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colons — %colons%","text":"variable name package package","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/grapes-colons-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colons — %colons%","text":"work around calling :::.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/grapes-colons-grapes.html","id":"warning","dir":"Reference","previous_headings":"","what":"WARNING","title":"Colons — %colons%","text":"reiterate documentation: advised use ::: code retrieve non-exported objects may likely change functionality exported objects.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL — if_null","title":"Default value for NULL — if_null","text":"Replace NULL","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL — if_null","text":"","code":"x %||% y  x %|||% y  x %len% y"},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL — if_null","text":"x, y x NULL returns y; otherwise x","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default value for NULL — if_null","text":"x NULL (length)","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default value for NULL — if_null","text":"mostly copy rlang's %||% except use rlang::is_null(), , currently, calls primitive .null function base::.null(). exported due conflicts purrr","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":null,"dir":"Reference","previous_headings":"","what":"Listing for dots — list0","title":"Listing for dots — list0","text":"Tries complain empty arguments","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Listing for dots — list0","text":"","code":"list0(...)"},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Listing for dots — list0","text":"... Arguments collect list","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Listing for dots — list0","text":"list ...","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Listing for dots — list0","text":"","code":"try(list(1,)) #> Error in list(1, ) : argument 2 is empty list0(1,) #> [[1]] #> [1] 1 #>"},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Value matching - Extensions — match_ext","title":"Value matching - Extensions — match_ext","text":"Non matching alternatives supplementary functions.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value matching - Extensions — match_ext","text":"","code":"is_in(x, table)  is_out(x, table)  x %out% table  is_within(x, table)  x %wi% table  is_without(x, table)  x %wo% table  no_match(x, table)  any_match(x, table)"},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value matching - Extensions — match_ext","text":"x vector NULL: values matched.     Long vectors supported. table vector NULL: values matched .     Long vectors supported.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value matching - Extensions — match_ext","text":"%%: logical vector equal length x, table %wo%, %wi%: vector values x any_match(), no_match(): TRUE FALSE","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Value matching - Extensions — match_ext","text":"Contrast base::match(), base::intersect(), %% functions %wi% %wo% can used lieu intersect() setdiff().  primary difference base functions return unique values, may desired behavior.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value matching - Extensions — match_ext","text":"","code":"1:10 %in% c(1,3,5,9) #>  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE 1:10 %out% c(1,3,5,9) #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE letters[1:5] %wo% letters[3:7] #> [1] \"a\" \"b\" letters[1:5] %wi% letters[3:7] #> [1] \"c\" \"d\" \"e\"  # base functions only return unique values            c(1:6,7:2) %wo% c(3,7,12)  # -> keeps duplicates #> [1] 1 2 4 5 6 6 5 4 2   setdiff(c(1:6,7:2),     c(3,7,12)) # -> unique values #> [1] 1 2 4 5 6            c(1:6,7:2) %wi% c(3,7,12)  # -> keeps duplicates #> [1] 3 7 intersect(c(1:6,7:2),     c(3,7,12)) # -> unique values #> [1] 3 7"},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Muffle messages — muffle","title":"Muffle messages — muffle","text":"Aliases base::suppressMessages() base::suppressWarnings()","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Muffle messages — muffle","text":"","code":"muffle(expr, fun, classes = \"message\")  wuffle(expr, fun, classes = \"warning\")"},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Muffle messages — muffle","text":"expr expression evaluate fun function muffle (wuffle) classes character vector classes suppress","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Muffle messages — muffle","text":"","code":"# load function foo <- function(...) {   message(\"You entered :\", paste0(...))   c(...) }  # wrap around function or muffle the function ti's muffle(foo(1, 2)) #> [1] 1 2 muffle(fun = foo)(1, 2) #> [1] 1 2 sapply(1:3, muffle(fun = foo)) #> [1] 1 2 3  # silence warnings wuffle(as.integer(\"a\")) #> [1] NA sapply(list(1, \"a\", \"0\", \".2\"), wuffle(fun = as.integer)) #> [1]  1 NA  0  0"},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Set names — names","title":"Set names — names","text":"Sets removes names","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set names — names","text":"","code":"set_names(x, nm = x)  remove_names(x)  x %names% nm  is_named(x, zero_ok = TRUE)"},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set names — names","text":"x vector values nm vector names zero_ok TRUE allows use \"\" special name","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set names — names","text":"x nm values assigned names (x NULL, NULL returned)","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"New condition — new_condition","title":"New condition — new_condition","text":"Template new condition.  See base::conditions","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New condition — new_condition","text":"","code":"new_condition(   msg = \"\",   class = NULL,   call = NULL,   type = c(\"error\", \"warning\", NA_character_),   message = msg )"},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New condition — new_condition","text":"msg, message message print class Character string single condition class call call expression type type (additional class) condition: either error\", \"warning\" NA, treated NULL","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New condition — new_condition","text":"condition classes specified params","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine operating systems — os","title":"Determine operating systems — os","text":"Determine operating systems","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine operating systems — os","text":"","code":"is_windows()  is_macos()  is_linux()"},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine operating systems — os","text":"TRUE FALSE","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick DF — quick_df","title":"Quick DF — quick_df","text":"speedier implementation .data.frame() provide sort checks. used caution.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick DF — quick_df","text":"","code":"quick_df(x = NULL)  empty_df()  quick_dfl(...)"},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick DF — quick_df","text":"x list NULL (see return) ... Columns tag = value (passed list())","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick DF — quick_df","text":"data.frame; x NULL data.frame 0 rows 0 columns returned (similar calling data.frame() faster)","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick DF — quick_df","text":"","code":"# unnamed will use make.names() x <- list(1:10, letters[1:10]) quick_df(x) #>    X1 X2 #> 1   1  a #> 2   2  b #> 3   3  c #> 4   4  d #> 5   5  e #> 6   6  f #> 7   7  g #> 8   8  h #> 9   9  i #> 10 10  j  # named is preferred names(x) <- c(\"numbers\", \"letters\") quick_df(x) #>    numbers letters #> 1        1       a #> 2        2       b #> 3        3       c #> 4        4       d #> 5        5       e #> 6        6       f #> 7        7       g #> 8        8       h #> 9        9       i #> 10      10       j  # empty data.frame quick_df(NULL) #> data frame with 0 columns and 0 rows"},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Require namespace — require_namespace","title":"Require namespace — require_namespace","text":"Require namespace","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require namespace — require_namespace","text":"","code":"require_namespace(package)"},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require namespace — require_namespace","text":"package name package","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require namespace — require_namespace","text":"TRUE (invisibly) found; otherwise errors","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple structures — struct","title":"Simple structures — struct","text":"Create simple structures","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple structures — struct","text":"","code":"struct(x, class, ..., .keep_attr = FALSE)"},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple structures — struct","text":"x object; NULL, coerced list() class vector classes; can also NULL ... Named attributes set x; overwrites attributes x even defined .keep_attr .keep_attr Control keeping attributes x: TRUE retain attributes x; character vector pick specifically defined attributes retain; otherwise attributes defined ... used","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple structures — struct","text":"object class defined class attributes ...","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple structures — struct","text":"Unlike base::structure() provide additional checks special names, performs base::storage.mode() conversions factors (x therefor integer), attributes x retained, class specified outside attributes assigned base::attributes() called. Essentially, just wrapper calling base::attributes() base::class(). Note base::structure() provides warning first argument NULL.  struct() .  coercion NULL list() done, documented, base::attributes().","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple structures — struct","text":"","code":"x <- list(a = 1, b = 2) # structure() retains the $names attribute of x but struct() does not structure(x, class = \"data.frame\", row.names = 1L) #>   a b #> 1 1 2 struct(x, \"data.frame\", row.names = 1L) #>       #> 1 1 2 struct(x, \"data.frame\", row.names = 1L, names = names(x)) #>   a b #> 1 1 2  # structure() corrects entries for \"factor\" class # but struct() demands the data to be an integer structure(1, class = \"factor\", levels = \"a\") #> [1] a #> Levels: a try(struct(1, \"factor\", levels = \"a\")) #> Error in class(x) <- class : adding class \"factor\" to an invalid object struct(1L, \"factor\", levels = \"a\") #> [1] a #> Levels: a  # When first argument is NULL -- attributes() coerces try(structure(NULL))    # NULL, no call to attributes() #> Warning: Calling 'structure(NULL, *)' is deprecated, as NULL cannot have attributes. #>   Consider 'structure(list(), *)' instead. #> NULL struct(NULL, NULL)      # list(), without warning #> list() x <- NULL attributes(x) <- NULL x                       # NULL #> NULL attributes(x) <- list() # struct() always grabs ... into a list x                       # list() #> list()  # Due to the use of class() to assign class, you may experience some # other differences between structure() and struct() x <- structure(1, class = \"integer\") y <- struct(1, \"integer\") str(x) #>  'integer' num 1 str(y) #>  int 1  all.equal(x, y) #> [1] \"Attributes: < Modes: list, NULL >\"                    #> [2] \"Attributes: < Lengths: 1, 0 >\"                        #> [3] \"Attributes: < names for target but not for current >\" #> [4] \"Attributes: < current is not list-like >\"             #> [5] \"target is integer, current is numeric\"                 # Be careful about carrying over attributes x <- quick_df(list(a = 1:2, b = 3:4)) # returns empty data.frame struct(x, \"data.frame\", new = 1) #> NULL #> <0 rows> (or 0-length row.names)  # safely changing names without breaking rownames struct(x, \"data.frame\", names = c(\"c\", \"d\")) # breaks #> [1] c d #> <0 rows> (or 0-length row.names) struct(x, \"data.frame\", names = c(\"c\", \"d\"), .keep_attr = TRUE) #>   c d #> 1 1 3 #> 2 2 4 struct(x, \"data.frame\", names = c(\"c\", \"d\"), .keep_attr = \"row.names\") #>   c d #> 1 1 3 #> 2 2 4  # safely adds comments struct(x, \"data.frame\", comment = \"hi\", .keep_attr = TRUE) #>   a b #> 1 1 3 #> 2 2 4 struct(x, \"data.frame\", comment = \"hi\", .keep_attr = c(\"names\", \"row.names\")) #>   a b #> 1 1 3 #> 2 2 4  # assignment in ... overwrites attributes struct(x, \"data.frame\", names = c(\"var1\", \"var2\"), .keep_attr = TRUE) #>   var1 var2 #> 1    1    3 #> 2    2    4"}]

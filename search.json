[{"path":"https://jmbarbone.github.io/fuj/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fuj authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jmbarbone.github.io/fuj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Mark Barbone. Author, copyright holder, maintainer.","code":""},{"path":"https://jmbarbone.github.io/fuj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbone J (2025). fuj: Functions Utilities Jordan. R package version 0.2.2.9000, https://jmbarbone.github.io/fuj/.","code":"@Manual{,   title = {fuj: Functions and Utilities for Jordan},   author = {Jordan Mark Barbone},   year = {2025},   note = {R package version 0.2.2.9000},   url = {https://jmbarbone.github.io/fuj/}, }"},{"path":"https://jmbarbone.github.io/fuj/index.html","id":"fuj-","dir":"","previous_headings":"","what":"Functions and Utilities for Jordan","title":"Functions and Utilities for Jordan","text":"goal fuj provide low level tools packages Jordan.","code":""},{"path":"https://jmbarbone.github.io/fuj/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions and Utilities for Jordan","text":"Install fuj CRAN : Alternatively, can install development version fuj GitHub :","code":"install.packages(\"fuj\") # install.packages(\"devtools\") devtools::install_github(\"jmbarbone/fuj\")"},{"path":"https://jmbarbone.github.io/fuj/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions and Utilities for Jordan","text":"Quicker data.frames: extensions: Simple structures: Suppress messages warnings:","code":"library(fuj) quick_df(list(a = 1:5, b = letters[1:5])) #>   a b #> 1 1 a #> 2 2 b #> 3 3 c #> 4 4 d #> 5 5 e quick_dfl(a = 1:3, b = list(1:5, 6:10, 11:15)) #>   a                  b #> 1 1      1, 2, 3, 4, 5 #> 2 2     6, 7, 8, 9, 10 #> 3 3 11, 12, 13, 14, 15 1:10 %out% c(1, 3, 5, 9)       # opposite of %in%  #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE letters[1:5] %wo% letters[3:7] #> [1] \"a\" \"b\" letters[1:5] %wi% letters[3:7] #> [1] \"c\" \"d\" \"e\" struct(list(a = 1, b = 2), class = \"foo\", c = 3, d = 3) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> attr(,\"c\") #> [1] 3 #> attr(,\"d\") #> [1] 3 #> attr(,\"class\") #> [1] \"foo\" foo <- function(...) { message(paste0(list(...))) ; c(...) } muffle(foo(1:3)) #> [1] 1 2 3 sapply(1:3, muffle(fun = foo)) #> [1] 1 2 3  x <- list(\"a\", 1) wuffle(as.integer(x)) #> [1] NA  1 sapply(x, wuffle(fun = as.integer)) #> [1] NA  1"},{"path":"https://jmbarbone.github.io/fuj/reference/alias_arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic wrappers — alias_arithmetic","title":"Arithmetic wrappers — alias_arithmetic","text":"Arithmetic wrappers","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/alias_arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic wrappers — alias_arithmetic","text":"See base::Arithmetic","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/alias_arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic wrappers — alias_arithmetic","text":"","code":"add(7, 2) # + #> [1] 9    subtract(7, 2) # - #> [1] 5    multiply(7, 2) # * #> [1] 14      divide(7, 2) # / #> [1] 3.5 raise_power(7, 2) # ^ #> [1] 49   remainder(7, 2) # %% #> [1] 1  divide_int(7, 2) # %/% #> [1] 3"},{"path":"https://jmbarbone.github.io/fuj/reference/alias_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and replace aliases — alias_extract","title":"Extract and replace aliases — alias_extract","text":"Extract replace aliases","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/alias_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and replace aliases — alias_extract","text":"See base::Extract","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/alias_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and replace aliases — alias_extract","text":"","code":"df <- quick_dfl(a = 1:5, b = 6:10) # alias of `[` subset1(df, 1) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 subset1(df, 1, ) #>   a b #> 1 1 6 subset1(df, , 1) #> [1] 1 2 3 4 5 subset1(df, , 1, drop = FALSE) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5  # alias of `[[` subset2(df, 1) #> [1] 1 2 3 4 5 subset2(df, 1, 2) #> [1] 6  # alias of `$` subset3(df, a) #> [1] 1 2 3 4 5 subset3(df, \"b\") #> [1]  6  7  8  9 10 subset3(df, \"foo\") #> NULL  # alias of `[<-` subassign1(df, \"a\", , 2) #>   a  b #> 1 1  6 #> 2 2  7 #> 3 3  8 #> 4 4  9 #> 5 5 10 #> a 2  2"},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse — collapse","title":"Collapse — collapse","text":"Simple wrapper concatenating strings","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse — collapse","text":"","code":"collapse(..., sep = \"\")"},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse — collapse","text":"... one R objects, converted character vectors. sep character string separate terms.      NA_character_.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse — collapse","text":"character vector concatenated values.  See base::paste details.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse — collapse","text":"","code":"collapse(1:10) #> [1] \"12345678910\" collapse(list(\"a\", b = 1:2)) #> [1] \"a12\" collapse(quick_dfl(a = 1:3, b = 4:6), sep = \"-\") #> [1] \"1-2-3-4-5-6\""},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":null,"dir":"Reference","previous_headings":"","what":"Colons — colons","title":"Colons — colons","text":"Get object namespace","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colons — colons","text":"","code":"package %::% name  package %:::% name  package %colons% name"},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colons — colons","text":"package Name package name Name retrieve","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colons — colons","text":"variable name package package","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colons — colons","text":"functions mimic use :: ::: extracting values namespaces.  %colons% alias %::%.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":"warning","dir":"Reference","previous_headings":"","what":"WARNING","title":"Colons — colons","text":"reiterate documentation: advised use ::: code retrieve non-exported objects may likely change functionality exported objects.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/fuj/reference/colons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colons — colons","text":"","code":"identical(\"base\" %::% \"mean\", base::mean) #> [1] TRUE \"fuj\" %:::% \"colons_example\" # unexported value #> [1] \"Hello, world\""},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact attributes — exattr","title":"Exact attributes — exattr","text":"Get exact attributes object","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact attributes — exattr","text":"","code":"exattr(x, which)  x %attr% which"},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact attributes — exattr","text":"x object whose attributes accessed. non-empty character string specifying attribute     accessed.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact attributes — exattr","text":"See base::attr","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/exattr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exact attributes — exattr","text":"","code":"foo <- struct(list(), \"foo\", aa = TRUE)   attr(foo, \"a\")  # TRUE : partial match successful #> [1] TRUE exattr(foo, \"a\")  # NULL : partial match failed #> NULL exattr(foo, \"aa\") # TRUE : exact match #> [1] TRUE"},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip — flip","title":"Flip — flip","text":"Flip object.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip — flip","text":"","code":"flip(x, ...)  # Default S3 method flip(x, ...)  # S3 method for class 'matrix' flip(x, by = c(\"rows\", \"columns\"), keep_rownames = NULL, ...)  # S3 method for class 'data.frame' flip(x, by = c(\"rows\", \"columns\"), keep_rownames = NULL, ...)"},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip — flip","text":"x object ... Additional arguments passed methods Flip \"rows\" \"columns\" (partial matches accepted) keep_rownames Logical, TRUE reset row names; NULL","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip — flip","text":"vector values, equal length x reversed data frame flipped rows/columns","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip — flip","text":"","code":"flip(letters[1:3]) #> [1] \"c\" \"b\" \"a\" flip(seq.int(9, -9, by = -3)) #> [1] -9 -6 -3  0  3  6  9 flip(head(iris)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.4         3.9          1.7         0.4  setosa #> 2          5.0         3.6          1.4         0.2  setosa #> 3          4.6         3.1          1.5         0.2  setosa #> 4          4.7         3.2          1.3         0.2  setosa #> 5          4.9         3.0          1.4         0.2  setosa #> 6          5.1         3.5          1.4         0.2  setosa flip(head(iris), keep_rownames = TRUE) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 6          5.4         3.9          1.7         0.4  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 1          5.1         3.5          1.4         0.2  setosa flip(head(iris), by = \"col\") #>   Species Petal.Width Petal.Length Sepal.Width Sepal.Length #> 1  setosa         0.2          1.4         3.5          5.1 #> 2  setosa         0.2          1.4         3.0          4.9 #> 3  setosa         0.2          1.3         3.2          4.7 #> 4  setosa         0.2          1.5         3.1          4.6 #> 5  setosa         0.2          1.4         3.6          5.0 #> 6  setosa         0.4          1.7         3.9          5.4"},{"path":"https://jmbarbone.github.io/fuj/reference/fp.html","id":null,"dir":"Reference","previous_headings":"","what":"File path — fp","title":"File path — fp","text":"is_path() checks either file_path class fs_path, latter useful fs package. file_path() alias fp() is_file_path() alias is_path().","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/fp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File path — fp","text":"","code":"fp(...)  file_path(...)  is_path(x)  is_file_path(x)"},{"path":"https://jmbarbone.github.io/fuj/reference/fp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File path — fp","text":"... Path components, passed file.path() x object test","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/fp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File path — fp","text":"fp()/file_path(): character vector normalized path \"file_path\" class is_path()/is_file_path(): TRUE FALSE value","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/fp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File path — fp","text":"Lightweight file path functions","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/fp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File path — fp","text":"","code":"fp(\"here\") #> here fp(\"~/there\") #> /home/runner/there fp(\"back\\\\slash\") #> back/slash fp(\"remove//extra\\\\\\\\slashes\") #> remove/extra/slashes fp(\"a\", c(\"b\", \"c\"), \"d\") #> a/b/d #> a/c/d"},{"path":"https://jmbarbone.github.io/fuj/reference/fuj-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fuj: Functions and Utilities for Jordan — fuj-package","title":"fuj: Functions and Utilities for Jordan — fuj-package","text":"Provides core functions utilities packages code developed Jordan Mark Barbone.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/fuj/reference/fuj-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fuj: Functions and Utilities for Jordan — fuj-package","text":"Maintainer: Jordan Mark Barbone jmbarbone@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for NULL or no length — if_null","title":"Default value for NULL or no length — if_null","text":"Replace NULL length","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for NULL or no length — if_null","text":"","code":"x %||% y  x %|||% y  x %len% y"},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for NULL or no length — if_null","text":"x, y x NULL returns y; otherwise x","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default value for NULL or no length — if_null","text":"x NULL length, depending check","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default value for NULL or no length — if_null","text":"mostly copy rlang's %||% except use rlang::is_null(), , currently, calls primitive base::.null function. Note: %||% copied {base} available (R versions >= 4.4)","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/if_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for NULL or no length — if_null","text":"","code":"# replace NULL (for R < 4.4) NULL %||% 1L #> [1] 1 2L   %||% 1L #> [1] 2  # replace empty \"\"       %|||% 1L #> [1] 1 NA       %|||% 1L #> [1] 1 double() %|||% 1L #> [1] 1 NULL     %|||% 1L #> [1] 1  # replace no length logical() %len% TRUE #> [1] TRUE FALSE     %len% TRUE #> [1] FALSE"},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":null,"dir":"Reference","previous_headings":"","what":"Include exports in Search Path — include","title":"Include exports in Search Path — include","text":"include() checks whether namespace loaded base::search() path.  uses naming convention include:{package} denote differences loading via base::library() base::require(). exports NULL, environment detached search path found.  exports NULL, Note: function specific purpose affecting search path.  Use options(fuj.verbose = TRUE) options(verbose = TRUE) information.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Include exports in Search Path — include","text":"","code":"include(package, exports = NULL, lib = .libPaths(), pos = 2L, warn = NULL)"},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Include exports in Search Path — include","text":"package package name.  can given name character string. See section package class handling. exports character vector exports.  named, exports aliases . lib See lib.loc base::loadNamespace(). pos integer specifying position search() path attach new environment. warn See warn.conflicts base::attach(), generally.  default NULL converts messagess masking errors verboseMessages, TRUE converts includeConflictsWarning messages, NA uses packageStartupMessages, FALSE silently ignores conflicts.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Include exports in Search Path — include","text":"attached environment, invisibly.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Include exports in Search Path — include","text":"Include (attach) package specific exports Search Path","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":"package-class-handling","dir":"Reference","previous_headings":"","what":"package class handling","title":"Include exports in Search Path — include","text":"package name AsIs, assumed installed package.  package file path (via is_path()) package assumed file path.  just string, viable path checked first; exist, assumed package. package source()'d name environment defaults base name x (file extension removed).  However, object .AttachName found sourced file, used environment name search() path. Note: include() try attach environment second time, however, package path, must source()ed time check .AttachName object.  side effects, repeated time include(path) called.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/include.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Include exports in Search Path — include","text":"","code":"# include(package) will ensure that the entire package is attached include(fuj) head(ls(\"include:fuj\"), 20) #>  [1] \"%::%\"            \"%:::%\"           \"%attr%\"          \"%colons%\"        #>  [5] \"%len%\"           \"%names%\"         \"%out%\"           \"%wi%\"            #>  [9] \"%wo%\"            \"%||%\"            \"%|||%\"           \"add\"             #> [13] \"any_match\"       \"attach2\"         \"attach_warn\"     \"check_conflicts\" #> [17] \"collapse\"        \"colons_check\"    \"colons_example\"  \"cond_colons\"     detach(\"include:fuj\", character.only = TRUE)  # include a single export include(fuj, \"collapse\")  # include multiple exports, and alias include(fuj, c(   no_names = \"remove_names\",   match_any = \"any_match\" ))  # include an export where the alias has a warn conflict include(fuj, c(attr = \"exattr\"))  # note that all 4 exports are included ls(\"include:fuj\") #> [1] \"attr\"      \"collapse\"  \"match_any\" \"no_names\"   # all exports are the same identical(collapse, fuj::collapse) #> [1] TRUE identical(no_names, fuj::remove_names) #> [1] TRUE identical(match_any, fuj::any_match) #> [1] TRUE identical(attr, fuj::exattr) #> [1] TRUE"},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":null,"dir":"Reference","previous_headings":"","what":"Listing for dots — list0","title":"Listing for dots — list0","text":"Tries complain empty arguments","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Listing for dots — list0","text":"","code":"list0(...)  lst(...)"},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Listing for dots — list0","text":"... Arguments collect list","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Listing for dots — list0","text":"list ...","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/list0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Listing for dots — list0","text":"","code":"try(list(1, )) #> Error in list(1, ) : argument 2 is empty list0(1, ) #> [[1]] #> [1] 1 #>  try(list(a = 1, )) #> Error in list(a = 1, ) : argument 2 is empty list0(a = 1, ) #> $a #> [1] 1 #>  try(list(a = 1, , c = 3, )) #> Error in list(a = 1, , c = 3, ) : argument 2 is empty list0(a = 1, , c = 3, ) #> $a #> [1] 1 #>  #> $c #> [1] 3 #>"},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Value matching - Extensions — match_ext","title":"Value matching - Extensions — match_ext","text":"Non matching alternatives supplementary functions.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value matching - Extensions — match_ext","text":"","code":"is_in(x, table)  is_out(x, table)  x %out% table  is_within(x, table)  x %wi% table  is_without(x, table)  x %wo% table  no_match(x, table)  any_match(x, table)"},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value matching - Extensions — match_ext","text":"x vector NULL: values matched.     Long vectors supported. table vector NULL: values matched .     Long vectors supported.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value matching - Extensions — match_ext","text":"%%: logical vector equal length x, table %wo%, %wi%: vector values x any_match(), no_match(): TRUE FALSE is_in(): see base::%%()","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Value matching - Extensions — match_ext","text":"Contrast base::match(), base::intersect(), base::%%() functions %wi% %wo% can used lieu base::intersect() base::setdiff().  primary difference base functions return unique values, may desired behavior.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/match_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value matching - Extensions — match_ext","text":"","code":"1:10 %in% c(1, 3, 5, 9) #>  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE 1:10 %out% c(1, 3, 5, 9) #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE letters[1:5] %wo% letters[3:7] #> [1] \"a\" \"b\" letters[1:5] %wi% letters[3:7] #> [1] \"c\" \"d\" \"e\"  # base functions only return unique values            c(1:6, 7:2) %wo% c(3, 7, 12)  # -> keeps duplicates #> [1] 1 2 4 5 6 6 5 4 2   setdiff(c(1:6, 7:2),     c(3, 7, 12)) # -> unique values #> [1] 1 2 4 5 6            c(1:6, 7:2) %wi% c(3, 7, 12)  # -> keeps duplicates #> [1] 3 7 3 intersect(c(1:6, 7:2),     c(3, 7, 12)) # -> unique values #> [1] 3 7"},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Muffle messages — muffle","title":"Muffle messages — muffle","text":"Aliases base::suppressMessages() base::suppressWarnings()","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Muffle messages — muffle","text":"","code":"muffle(expr, fun, classes = \"message\")  wuffle(expr, fun, classes = \"warning\")"},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Muffle messages — muffle","text":"expr expression evaluate fun function muffle (wuffle) classes character vector classes suppress","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Muffle messages — muffle","text":"result expr function wrapping fun","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/muffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Muffle messages — muffle","text":"","code":"# load function foo <- function(...) {   message(\"You entered :\", paste0(...))   c(...) }  # wrap around function or muffle the function ti's muffle(foo(1, 2)) #> [1] 1 2 muffle(fun = foo)(1, 2) #> [1] 1 2 sapply(1:3, muffle(fun = foo)) #> [1] 1 2 3  # silence warnings wuffle(as.integer(\"a\")) #> [1] NA sapply(list(1, \"a\", \"0\", \".2\"), wuffle(fun = as.integer)) #> [1]  1 NA  0  0"},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Set names — names","title":"Set names — names","text":"Sets removes names","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set names — names","text":"","code":"set_names(x, nm = x)  remove_names(x)  x %names% nm  is_named(x, zero_ok = TRUE)"},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set names — names","text":"x vector values nm vector names zero_ok TRUE allows use \"\" special name","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set names — names","text":"x nm values assigned names (x NULL, NULL returned)","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set names — names","text":"","code":"set_names(1:5) #> 1 2 3 4 5  #> 1 2 3 4 5  set_names(1:5, c(\"a\", \"b\", \"c\", \"d\", \"e\")) #> a b c d e  #> 1 2 3 4 5   x <- c(a = 1, b = 2) remove_names(x) #> [1] 1 2 x %names% c(\"c\", \"d\") #> c d  #> 1 2  is_named(x) #> [1] TRUE"},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"New condition — new_condition","title":"New condition — new_condition","text":"Template new condition.  See base::conditions","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New condition — new_condition","text":"","code":"new_condition(   msg = \"\",   class = NULL,   call = NULL,   type = c(\"error\", \"warning\", \"message\", NA_character_),   message = msg,   pkg = package() )"},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New condition — new_condition","text":"msg, message message print class Character string single condition class call call expression type type (additional class) condition: error\", \"warning\", \"message\", NA, treated NULL. pkg Control adding package name condition.  TRUE try get current package name (via .packageName) , presumably, developmental package.  FALSE NULL, package name prepended condition class new class.  Otherwise, package can explicitly set single length character.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New condition — new_condition","text":"condition classes specified class type","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"New condition — new_condition","text":"use .packageName pkg = TRUE may valid active development.  attempt retrieve .packageName object unsuccessful, error quietly ignored.  However, successful package build functions can utilize created object.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/new_condition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New condition — new_condition","text":"","code":"# empty condition x <- new_condition(\"informative error message\", class = \"foo\") try(stop(x)) #> Error : <fooError> informative error message  # with pkg x <- new_condition(\"msg\", class = \"foo\", pkg = \"bar\") # class contains multiple identifiers, including a \"bar:fooError\" class(x) #> [1] \"fujCondition\" \"bar:fooError\" \"fooError\"     \"error\"        \"condition\"    # message contains package information at the end try(stop(x)) #> Error : <fooError> msg #> package:bar"},{"path":"https://jmbarbone.github.io/fuj/reference/op.fuj.html","id":null,"dir":"Reference","previous_headings":"","what":"{fuj} options — op.fuj","title":"{fuj} options — op.fuj","text":"Options uses {fuj} functions.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/op.fuj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"{fuj} options — op.fuj","text":"","code":"op.fuj"},{"path":"https://jmbarbone.github.io/fuj/reference/op.fuj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"{fuj} options — op.fuj","text":"object class list length 3.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/op.fuj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"{fuj} options — op.fuj","text":"","code":"names(op.fuj) #> [1] \"fuj.verbose\"       \"fuj.verbose.fill\"  \"fuj.verbose.label\" op.fuj #> $fuj.verbose #> NULL #>  #> $fuj.verbose.fill #> [1] FALSE #>  #> $fuj.verbose.label #> [1] \"verbose: \" #>"},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine operating systems — os","title":"Determine operating systems — os","text":"Determine operating systems","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine operating systems — os","text":"","code":"is_windows()  is_macos()  is_linux()"},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine operating systems — os","text":"TRUE FALSE","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/os.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine operating systems — os","text":"","code":"is_windows() #> [1] FALSE is_macos() #> [1] FALSE is_linux() #> [1] TRUE"},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick DF — quick_df","title":"Quick DF — quick_df","text":"speedier implementation .data.frame() provide sort checks. used caution.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick DF — quick_df","text":"","code":"quick_df(x = NULL)  empty_df()  quick_dfl(...)"},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick DF — quick_df","text":"x list NULL (see return) ... Columns tag = value (passed list())","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick DF — quick_df","text":"data.frame; x NULL data.frame 0 rows 0 columns returned (similar calling data.frame() faster). empty_df() returns data.frame 0 rows 0 columns.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/quick_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick DF — quick_df","text":"","code":"# unnamed will use make.names() x <- list(1:10, letters[1:10]) quick_df(x) #>     1 2 #> 1   1 a #> 2   2 b #> 3   3 c #> 4   4 d #> 5   5 e #> 6   6 f #> 7   7 g #> 8   8 h #> 9   9 i #> 10 10 j  # named is preferred names(x) <- c(\"numbers\", \"letters\") quick_df(x) #>    numbers letters #> 1        1       a #> 2        2       b #> 3        3       c #> 4        4       d #> 5        5       e #> 6        6       f #> 7        7       g #> 8        8       h #> 9        9       i #> 10      10       j  # empty data.frame empty_df() # or quick_df(NULL) #> data frame with 0 columns and 0 rows"},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Require namespace — require_namespace","title":"Require namespace — require_namespace","text":"Require namespace","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require namespace — require_namespace","text":"","code":"require_namespace(package, ...)"},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require namespace — require_namespace","text":"package, ... Package names","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require namespace — require_namespace","text":"TRUE (invisibly) found; otherwise errors","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/require_namespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Require namespace — require_namespace","text":"","code":"isTRUE(require_namespace(\"base\")) # returns invisibly #> [1] TRUE try(require_namespace(\"1package\")) # (using a purposefully bad name) #> Error : <namespaceError> No package found called '1package' #> package:fuj require_namespace(\"base\", \"utils\") try(require_namespace(\"base>=3.5\", \"utils>4.0\", \"fuj==10.0\")) #> Error : <namespaceVersionError> Package version requirement not meet: #> fuj: 0.2.2.9000 == 10.0 #> package:fuj"},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple structures — struct","title":"Simple structures — struct","text":"Create simple structures","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple structures — struct","text":"","code":"struct(x, class, ..., .keep_attr = FALSE)"},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple structures — struct","text":"x object; NULL, coerced list() class vector classes; can also NULL ... Named attributes set x; overwrites attributes x even defined .keep_attr .keep_attr Control keeping attributes x: TRUE retain attributes x; character vector pick specifically defined attributes retain; otherwise attributes defined ... used","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple structures — struct","text":"object class defined class attributes ...","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple structures — struct","text":"Unlike base::structure() provide additional checks special names, performs base::storage.mode() conversions factors (x therefor integer), attributes x retained, class specified outside attributes assigned base::attributes() called. Essentially, just wrapper calling base::attributes() base::class(). Note base::structure() provides warning first argument NULL.  struct() .  coercion NULL list() done, documented, base::attributes().","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/struct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple structures — struct","text":"","code":"x <- list(a = 1, b = 2) # structure() retains the $names attribute of x but struct() does not structure(x, class = \"data.frame\", row.names = 1L) #>   a b #> 1 1 2 struct(x, \"data.frame\", row.names = 1L) #>       #> 1 1 2 struct(x, \"data.frame\", row.names = 1L, names = names(x)) #>   a b #> 1 1 2  # structure() corrects entries for \"factor\" class # but struct() demands the data to be an integer structure(1, class = \"factor\", levels = \"a\") #> [1] a #> Levels: a try(struct(1, \"factor\", levels = \"a\")) #> Error in class(x) <- class : adding class \"factor\" to an invalid object struct(1L, \"factor\", levels = \"a\") #> [1] a #> Levels: a  # When first argument is NULL -- attributes() coerces try(structure(NULL))    # NULL, no call to attributes() #> Warning: Calling 'structure(NULL, *)' is deprecated, as NULL cannot have attributes. #>   Consider 'structure(list(), *)' instead. #> NULL struct(NULL, NULL)      # list(), without warning #> list() x <- NULL attributes(x) <- NULL x                       # NULL #> NULL attributes(x) <- list() # struct() always grabs ... into a list x                       # list() #> list()  # Due to the use of class() to assign class, you may experience some # other differences between structure() and struct() x <- structure(1, class = \"integer\") y <- struct(1, \"integer\") str(x) #>  'integer' num 1 str(y) #>  int 1  all.equal(x, y) #> [1] \"Attributes: < Modes: list, NULL >\"                    #> [2] \"Attributes: < Lengths: 1, 0 >\"                        #> [3] \"Attributes: < names for target but not for current >\" #> [4] \"Attributes: < current is not list-like >\"             #> [5] \"target is integer, current is numeric\"                 # Be careful about carrying over attributes x <- quick_df(list(a = 1:2, b = 3:4)) # returns empty data.frame struct(x, \"data.frame\", new = 1) #> NULL #> <0 rows> (or 0-length row.names)  # safely changing names without breaking rownames struct(x, \"data.frame\", names = c(\"c\", \"d\")) # breaks #> [1] c d #> <0 rows> (or 0-length row.names) struct(x, \"data.frame\", names = c(\"c\", \"d\"), .keep_attr = TRUE) #>   c d #> 1 1 3 #> 2 2 4 struct(x, \"data.frame\", names = c(\"c\", \"d\"), .keep_attr = \"row.names\") #>   c d #> 1 1 3 #> 2 2 4  # safely adds comments struct(x, \"data.frame\", comment = \"hi\", .keep_attr = TRUE) #>   a b #> 1 1 3 #> 2 2 4 struct(x, \"data.frame\", comment = \"hi\", .keep_attr = c(\"names\", \"row.names\")) #>   a b #> 1 1 3 #> 2 2 4  # assignment in ... overwrites attributes struct(x, \"data.frame\", names = c(\"var1\", \"var2\"), .keep_attr = TRUE) #>   var1 var2 #> 1    1    3 #> 2    2    4"},{"path":"https://jmbarbone.github.io/fuj/reference/verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbose — verbose","title":"Verbose — verbose","text":"Simple verbose condition handling","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verbose — verbose","text":"","code":"verbose(   ...,   .fill = getOption(\"fuj.verbose.fill\"),   .label = getOption(\"fuj.verbose.label\"),   .verbose = getOption(\"fuj.verbose\", getOption(\"verbose\")) )  make_verbose(opt)"},{"path":"https://jmbarbone.github.io/fuj/reference/verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verbose — verbose","text":"... message display.  ... NULL (NULL), message display. .fill TRUE, new line prefixed verbose label (controlled options(\"fuj.verbose.fill\")) .label label prefix message (controlled options(\"fuj.verbose.label\")) .verbose TRUE (function returns TRUE) prints message. opt option use lieu fun.verbose.  Note: options(\"fuj.verbose\") temporarily set isTRUE(getOption(opt)) function evaluate, reset original value exit.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verbose — verbose","text":"None, called side-effects.  conditions met, signal verboseMessage condition.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/verbose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verbose — verbose","text":"verbose() can safely placed scripts signal additional message conditions.  verbose() can controlled options(\"verbose\") (default) override, options(\"fuj.verbose\").  latter can set function whose result used conditional evaluation. make_verbose() allows creation custom verbose function.","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/verbose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verbose — verbose","text":"","code":"op <- options(verbose = FALSE) verbose(\"will not show\")  options(verbose = TRUE) verbose(\"message printed\") #> verbose: message printed verbose(\"multiple lines \", \"will be \", \"combined\") #> verbose: multiple lines will be combined options(op)  op <- options(fuj.verbose = function() TRUE) verbose(\"function will evaluate\") #> verbose: function will evaluate verbose(NULL) # nothing verbose(NULL, \"something\") #> verbose: something verbose(if (FALSE) { \"`if` returns `NULL` when not `TRUE`, which makes for additional control\" }) options(op)  # make your own verbose verb <- make_verbose(\"fuj.foo.bar\") verb(\"will not show\") options(fuj.foo.bar = TRUE) verb(\"will show\") #> verbose: will show"},{"path":"https://jmbarbone.github.io/fuj/reference/yes_no.html","id":null,"dir":"Reference","previous_headings":"","what":"Yes-no prompt — yes_no","title":"Yes-no prompt — yes_no","text":"Prompts user make yes/selection","code":""},{"path":"https://jmbarbone.github.io/fuj/reference/yes_no.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yes-no prompt — yes_no","text":"","code":"yes_no(..., na = NULL, n_yes = 1, n_no = 2, noninteractive_error = TRUE)"},{"path":"https://jmbarbone.github.io/fuj/reference/yes_no.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Yes-no prompt — yes_no","text":"... text display na Text NA response.  NULL, provide possible NA response.  n_yes, n_no number yes/selections noninteractive_error TRUE, throws error session interactive.  FALSE, return NA instead.","code":""},{"path":[]},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-022","dir":"Changelog","previous_headings":"","what":"fuj 0.2.2","title":"fuj 0.2.2","text":"CRAN release: 2025-04-23 require_namespace() now produces reasonable error specifying version #63 adds yes_no() prompting #64 adds internal package() utility default new_condition(pkg = package()) #67 new_condition() now allows type = \"message\" #74 workflows updated quick_df(list()) now works #72 removes tests struct() #78","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-021","dir":"Changelog","previous_headings":"","what":"fuj 0.2.1","title":"fuj 0.2.1","text":"CRAN release: 2024-05-20","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"fuj 0.2.1","text":"lst() works NA_character_ #60","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-020","dir":"Changelog","previous_headings":"","what":"fuj 0.2.0","title":"fuj 0.2.0","text":"CRAN release: 2024-05-07","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"fuj 0.2.0","text":"%wi% longer drops duplicated x #44 list0() now works better edge cases #55","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"fuj 0.2.0","text":"fp() added creating file path objects is_path() means checking class; file_path() is_file_path() exported aliases, respectively #55 include() added means partially attaching package specific exports #49 op.fuj, named list default options fuj now exported .label can set string prepend message (defaults \"[verbose]\") .fill can set repeat .label line message (defaults FALSE) .verbose can set TRUE print message rather relying options() verbose() prints prepended \"verbose \" instead \"[verbose] \" #42 make_verbose() included create verbose function triggered configured option, rather default getOption(\"fuj.verbose\", getOption(\"verbose\")) pattern. can used define custom verbose function: lst() exported alias list0()","code":"library(fuj) options(fuj.verbose = FALSE) verbose(\"will not show\")  options(my.verbose = TRUE) my_verbose <- make_verbose(\"my.verbose\") my_verbose(\"will show\") #> [verbose] will show"},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"internals-0-2-0","dir":"Changelog","previous_headings":"","what":"Internals","title":"fuj 0.2.0","text":"%||% now copied {base} available (R versions >= 4.4) #35 additional local testing os version covr dropped suggest dependency require_namespace() now allows version requirements (e.g., require_namespace(\"fuj>=0.1.4\")). version requirement met, error class namespaceVersionError returned #41 simpleErrors converted custom errors #43","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-014","dir":"Changelog","previous_headings":"","what":"fuj 0.1.4","title":"fuj 0.1.4","text":"CRAN release: 2023-10-22 adds %::% %:::% (now aliases %colons$) retrieving exported non-exported values namespaces #31 adds verbose() conditional message printing #29 GitHub workflow added maintain version bumps merge jmbarbone/actions/r-check-version","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-013","dir":"Changelog","previous_headings":"","what":"fuj 0.1.3","title":"fuj 0.1.3","text":"CRAN release: 2023-05-22 list0() now accepts named arguments ... #25","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-012","dir":"Changelog","previous_headings":"","what":"fuj 0.1.2","title":"fuj 0.1.2","text":"CRAN release: 2023-03-06 new_condition() gains pkg argument control prepending package name condition call. default value TRUE try find .packageName object package. Change default setting pkg prevent addition. #12 require_namespace() can now accept multiple namespaces. first namespace found throw error #14 list0() now correctly throws valid errors #19 typo fixed README #20","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-011","dir":"Changelog","previous_headings":"","what":"fuj 0.1.1","title":"fuj 0.1.1","text":"CRAN release: 2022-11-18 subset2 now exported alias [[ subset3 added alias $ #3 improved documentation aliases #3 improved test coverage – longer skipping functions #7","code":""},{"path":"https://jmbarbone.github.io/fuj/news/index.html","id":"fuj-010","dir":"Changelog","previous_headings":"","what":"fuj 0.1.0","title":"fuj 0.1.0","text":"CRAN release: 2022-11-01 First release Added NEWS.md file track changes package.","code":""}]
